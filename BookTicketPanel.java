/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.movieticketbookingsystem;

import java.sql.SQLException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Noltan
 */
public class BookTicketPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookTicketPanel
     */
     Database database;
  private int userID;
  ArrayList<Movie> movies;
  ArrayList<Show> shows;
    public BookTicketPanel(Database database, int userID) {
    initComponents();
    this.database = database;
    this.userID = userID;

    lblStatus.setText("");
   loadMovies();
    
}

    
   private void loadMovies() {
     movies = MoviesDatabase.getAllMovies(database);
    for (Movie movie : movies) {
        comboMovie.addItem(movie.getID() + " - " + movie.getName());
    }
}

private void loadShows(int movieID) {
    comboShow.removeAllItems();
    ArrayList<Show> shows = MoviesDatabase.getAllMovieShows(database, movieID);

    if (shows == null || shows.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Could not load shows for selected movie.");
        return;
    }

    for (Show show : shows) {
        if (show != null) {
            comboShow.addItem(show.getID() + " - " + show.getDate() + " " + show.getTime());
        }
    }
}


private void bookTicket(int movieID, int showID, String userName, int seatsToBook) {
    Show show = MoviesDatabase.getShowTime(movieID, showID, database);
    if (show.getAvailableSeats() >= seatsToBook) {
        int newAvailable = show.getAvailableSeats() - seatsToBook;
        String update = "UPDATE `movie " + movieID + " - shows` SET `availableSeats` = "
                + newAvailable + " WHERE `ID` = " + showID + ";";
        try {
            database.getStatement().execute(update);
            JOptionPane.showMessageDialog(this, "Ticket booked successfully for " + userName + "!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to book ticket.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Not enough seats available.");
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSeats = new javax.swing.JTextField();
        btnBook = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comboMovie = new javax.swing.JComboBox<>();
        lblShow = new javax.swing.JLabel();
        comboShow = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        setBackground(new java.awt.Color(33, 37, 41));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 193, 7));
        jLabel1.setText("Book Ticket");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Number of Seats:");

        btnBook.setBackground(new java.awt.Color(255, 193, 7));
        btnBook.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnBook.setText("Book Ticket");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select Movie:");

        comboMovie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Movie IDs" }));
        comboMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMovieActionPerformed(evt);
            }
        });

        lblShow.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblShow.setForeground(new java.awt.Color(255, 255, 255));
        lblShow.setText("Select Show:");

        comboShow.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Show IDs" }));
        comboShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboShowActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Your Name:");

        lblStatus.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 193, 7));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(lblShow)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboMovie, 0, 207, Short.MAX_VALUE)
                            .addComponent(comboShow, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtName)
                            .addComponent(txtSeats)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(241, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblShow)
                    .addComponent(comboShow, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMovieActionPerformed
        comboShow.removeAllItems();
        String selected = (String) comboMovie.getSelectedItem();
        if (selected != null && selected.contains(" - ")) {
            int movieID = Integer.parseInt(selected.split(" - ")[0]);
            shows = MoviesDatabase.getAllMovieShows(database, movieID);

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
            for (Show show : shows) {
                if (show != null && show.getShowTime() != null) {
                    String formattedTime = show.getShowTime().format(formatter);
                    comboShow.addItem(show.getID() + " - " + formattedTime);
                } else {
                    comboShow.addItem(show.getID() + " - [Invalid Date/Time]");
                }
            }
        }
    }//GEN-LAST:event_comboMovieActionPerformed

    private void comboShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboShowActionPerformed

    }//GEN-LAST:event_comboShowActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed

        String name = txtName.getText().trim();
        String seatsStr = txtSeats.getText().trim();

        if (name.isEmpty() || seatsStr.isEmpty()) {
            lblStatus.setText("Please enter your name and number of seats.");
            return;
        }

        int seats;
        try {
            seats = Integer.parseInt(seatsStr);
            if (seats <= 0) {
                lblStatus.setText("Number of seats must be positive.");
                return;
            }
        } catch (NumberFormatException e) {
            lblStatus.setText("Enter a valid number for seats.");
            return;
        }

        String movieItem = (String) comboMovie.getSelectedItem();
        String showItem = (String) comboShow.getSelectedItem();

        if (movieItem == null || showItem == null) {
            lblStatus.setText("Select a movie and show.");
            return;
        }

        int movieID = Integer.parseInt(movieItem.split(" - ")[0].trim());
        int showID = Integer.parseInt(showItem.split(" - ")[0].trim());

        Show show = MoviesDatabase.getShowTime(movieID, showID, database);
        if (show == null || show.getID() < 0) {
            lblStatus.setText("Show not found for the selected Movie ID and Show ID.");
            return;
        }
        int availableSeats = show.getAvailableSeats();

        if (seats > availableSeats) {
            lblStatus.setText("Only " + availableSeats + " seats available.");
            return;
        }

        int bookingID = BookingsDatabase.getNextBookingID(database, userID);
        show.setAvailableSeats(availableSeats - seats);

        String insert = "INSERT INTO `user " + userID + " - bookings` "
        + "(`ID`, `Seats`, `MovieID`, `ShowID`) VALUES "
        + "(" + bookingID + "," + seats + "," + movieID + "," + showID + ");";

        String update = "UPDATE `movie " + movieID + " - shows` SET "
        + "`showTime`='" + show.getDate() + " " + show.getTime() + "', "
        + "`capacity`=" + show.getCapacity() + ", "
        + "`availableSeats`=" + show.getAvailableSeats() + ", "
        + "`place`='" + show.getPlace() + "' "
        + "WHERE `ID` = " + show.getID() + ";";

        try {
            database.getStatement().execute(insert);
            database.getStatement().execute(update);
            lblStatus.setText("Booking successful!");
        } catch (SQLException e) {
            lblStatus.setText("Booking failed.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBookActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JComboBox<String> comboMovie;
    private javax.swing.JComboBox<String> comboShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblShow;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSeats;
    // End of variables declaration//GEN-END:variables
}
