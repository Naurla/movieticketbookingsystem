/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.movieticketbookingsystem;

/**
 *
 * @author Noltan
 */

import javax.swing.*;
import java.awt.event.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

public class BookTicketFrame extends javax.swing.JFrame {

  Database database;
  private int userID;
  ArrayList<Movie> movies;
  ArrayList<Show> shows;
public BookTicketFrame(Database database, int userID) {
    initComponents();
    this.database = database;
    this.userID = userID;

    lblStatus.setText("");
   loadMovies();
    
}

    
   private void loadMovies() {
     movies = MoviesDatabase.getAllMovies(database);
    for (Movie movie : movies) {
        comboMovie.addItem(movie.getID() + " - " + movie.getName());
    }
}

private void loadShows(int movieID) {
    comboShow.removeAllItems();
    ArrayList<Show> shows = MoviesDatabase.getAllMovieShows(database, movieID);

    if (shows == null || shows.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Could not load shows for selected movie.");
        return;
    }

    for (Show show : shows) {
        if (show != null) {
            comboShow.addItem(show.getID() + " - " + show.getDate() + " " + show.getTime());
        }
    }
}


private void bookTicket(int movieID, int showID, String userName, int seatsToBook) {
    Show show = MoviesDatabase.getShowTime(movieID, showID, database);
    if (show.getAvailableSeats() >= seatsToBook) {
        int newAvailable = show.getAvailableSeats() - seatsToBook;
        String update = "UPDATE `movie " + movieID + " - shows` SET `availableSeats` = "
                + newAvailable + " WHERE `ID` = " + showID + ";";
        try {
            database.getStatement().execute(update);
            JOptionPane.showMessageDialog(this, "Ticket booked successfully for " + userName + "!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to book ticket.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Not enough seats available.");
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboMovie = new javax.swing.JComboBox<>();
        lblShow = new javax.swing.JLabel();
        comboShow = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSeats = new javax.swing.JTextField();
        btnBook = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select Movie:");

        comboMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMovieActionPerformed(evt);
            }
        });

        lblShow.setText("Select Show:");

        comboShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboShowActionPerformed(evt);
            }
        });

        jLabel2.setText("Your Name:");

        jLabel3.setText("Number of Seats:");

        btnBook.setText("Book Ticket");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblStatus)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(lblShow)
                    .addComponent(comboMovie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(comboShow, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtName)
                    .addComponent(txtSeats)
                    .addComponent(btnBook, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(comboMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblShow)
                .addGap(18, 18, 18)
                .addComponent(comboShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(btnBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus)
                .addGap(26, 26, 26)
                .addComponent(btnBack)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
       
          String name = txtName.getText().trim();
    String seatsStr = txtSeats.getText().trim();

    if (name.isEmpty() || seatsStr.isEmpty()) {
        lblStatus.setText("Please enter your name and number of seats.");
        return;
    }

    int seats;
    try {
        seats = Integer.parseInt(seatsStr);
        if (seats <= 0) {
            lblStatus.setText("Number of seats must be positive.");
            return;
        }
    } catch (NumberFormatException e) {
        lblStatus.setText("Enter a valid number for seats.");
        return;
    }

    String movieItem = (String) comboMovie.getSelectedItem();
    String showItem = (String) comboShow.getSelectedItem();

    if (movieItem == null || showItem == null) {
        lblStatus.setText("Select a movie and show.");
        return;
    }

   int movieID = Integer.parseInt(movieItem.split(" - ")[0].trim());
int showID = Integer.parseInt(showItem.split(" - ")[0].trim());


    Show show = MoviesDatabase.getShowTime(movieID, showID, database);
    if (show == null || show.getID() < 0) {
    lblStatus.setText("Show not found for the selected Movie ID and Show ID.");
    return;
}
    int availableSeats = show.getAvailableSeats();

    if (seats > availableSeats) {
        lblStatus.setText("Only " + availableSeats + " seats available.");
        return;
    }

    int bookingID = BookingsDatabase.getNextBookingID(database, userID);
    show.setAvailableSeats(availableSeats - seats);

    String insert = "INSERT INTO `user " + userID + " - bookings` "
            + "(`ID`, `Seats`, `MovieID`, `ShowID`) VALUES "
            + "(" + bookingID + "," + seats + "," + movieID + "," + showID + ");";

    String update = "UPDATE `movie " + movieID + " - shows` SET "
            + "`showTime`='" + show.getDate() + " " + show.getTime() + "', "
            + "`capacity`=" + show.getCapacity() + ", "
            + "`availableSeats`=" + show.getAvailableSeats() + ", "
            + "`place`='" + show.getPlace() + "' "
            + "WHERE `ID` = " + show.getID() + ";";

    try {
        database.getStatement().execute(insert);
        database.getStatement().execute(update);
        lblStatus.setText("Booking successful!");
    } catch (SQLException e) {
        lblStatus.setText("Booking failed.");
        e.printStackTrace();
    }
    
    

        
 

    }//GEN-LAST:event_btnBookActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
       dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMovieActionPerformed
       comboShow.removeAllItems();
    String selected = (String) comboMovie.getSelectedItem();
    if (selected != null && selected.contains(" - ")) {
        int movieID = Integer.parseInt(selected.split(" - ")[0]);
        shows = MoviesDatabase.getAllMovieShows(database, movieID);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        for (Show show : shows) {
            if (show != null && show.getShowTime() != null) {
                String formattedTime = show.getShowTime().format(formatter);
                comboShow.addItem(show.getID() + " - " + formattedTime);
            } else {
                comboShow.addItem(show.getID() + " - [Invalid Date/Time]");
            }
        }
    }
    
   


    }//GEN-LAST:event_comboMovieActionPerformed

    private void comboShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboShowActionPerformed
       
    }//GEN-LAST:event_comboShowActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(BookTicketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(BookTicketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(BookTicketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(BookTicketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new BookTicketFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBook;
    private javax.swing.JComboBox<String> comboMovie;
    private javax.swing.JComboBox<String> comboShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblShow;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSeats;
    // End of variables declaration//GEN-END:variables
}
